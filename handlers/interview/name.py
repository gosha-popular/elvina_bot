"""
[RU]
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

[EN]
Module for handling username acquisition.

Manages the process of requesting and receiving username,
offers to use name from Telegram profile or enter different name.
Saves user information in the database.
"""

import html
import logging

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from data.database import User
from handlers.menu import start_message
from states.user_states import Interview

router = Router(name=__name__)
router.message.filter(StateFilter(Interview.name))
router.callback_query.filter(StateFilter(Interview.name))

async def start(message: Message, state: FSMContext):
    """
    [RU]
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Starts the greeting dialogue with user.
    
    Sends welcome message and offers to use name
    from Telegram profile.

    Args:
        message (Message): Telegram message object
        state (FSMContext): FSM state context
    """
    text = '''üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å!\n–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?'''

    builder = InlineKeyboardBuilder()
    builder.button(text=f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {html.escape(message.from_user.first_name)}!', callback_data=message.from_user.first_name)

    await state.set_state(Interview.name)
    await message.answer(
        text=text,
        reply_markup=builder.as_markup()
    )


@router.message()
async def input_my_name_is(message: Message, state: FSMContext, session: AsyncSession):
    """
    [RU]
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º—è.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    [EN]
    Processes user-entered name.
    
    Saves username and proceeds to main menu.

    Args:
        message (Message): Telegram message object
        state (FSMContext): FSM state context
        session (AsyncSession): Database session
    """
    user = message.text
    await add_user(user, session)
    await start_message(message, user)
    await state.clear()

@router.callback_query()
async def callback_my_name_is(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    [RU]
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–º–µ–Ω–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    [EN]
    Processes name selection from Telegram profile.
    
    Saves username and proceeds to main menu.

    Args:
        callback (CallbackQuery): Callback query object
        state (FSMContext): FSM state context
        session (AsyncSession): Database session
    """
    await callback.answer()
    user = callback.from_user
    await add_user(user, session)
    await start_message(callback.message, callback.data)
    await state.clear()

async def add_user(user, session):
    """
    [RU]
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    [EN]
    Adds user information to database.

    Args:
        user: Telegram user object
        session: Database session
    """
    try:
        session.add(User(
            id=user.id,
            username=user.username,
            name=user.first_name,
        ))
        await session.commit()
    except Exception as e:
        logging.error(e)


