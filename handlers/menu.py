"""
[RU]
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,
–∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ –∑–∞–∫–∞–∑ —Å–∞–π—Ç–∞. –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏
–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

[EN]
Bot main menu handling module.

Contains handlers for main bot sections: main menu,
contacts, work examples and site ordering. Manages navigation
and information display to the user.
"""

import html
from pathlib import Path

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from states.user_states import Interview, Reference

router = Router(name=__name__)

hello_message = '''üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, {user}!\n
–ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞, —Å–æ–∑–¥–∞—é—â–∞—è <b>–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, —Å—Ç–∏–ª—å–Ω—ã–µ –∏ –ø—Ä–æ–¥–∞—é—â–∏–µ —Å–∞–π—Ç—ã.</b>\n
–ú—ã –ø–æ–º–æ–∂–µ–º –≤–æ–ø–ª–æ—Ç–∏—Ç—å –í–∞—à–∏ –∏–¥–µ–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏.\n
–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –∫–∞–∫–æ–π —Å–∞–π—Ç –í–∞–º –Ω—É–∂–µ–Ω!'''


async def start_message(message: Message, name):
    """
    [RU]
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        name (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

    [EN]
    Sends welcome message and shows main menu.

    Args:
        message (Message): Telegram message object
        name (str): Username for greeting
    """
    await message.answer(
        text=hello_message.format(
            user=html.escape(name)
        )
    )
    await main_menu(message)


async def main_menu(message: Message, state: FSMContext = None):
    """
    [RU]
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        state (FSMContext, optional): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Displays bot main menu.

    Args:
        message (Message): Telegram message object
        state (FSMContext, optional): FSM state context
    """
    if state:
        await state.clear()

    builder = InlineKeyboardBuilder()
    for name in ['üíª –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç', 'üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', 'üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç']:
        builder.button(text=name, callback_data=name)
    builder.adjust(1, 2)

    await message.delete()
    await message.answer(
        text="üè† –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.casefold().contains('–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def get_menu(callback: CallbackQuery, state: FSMContext):
    """
    [RU]
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Handler for returning to main menu.

    Args:
        callback (CallbackQuery): Callback query object
        state (FSMContext): FSM state context
    """
    await main_menu(message=callback.message, state=state)


@router.callback_query(F.data.casefold().contains('–Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'))
async def main_contact(callback: CallbackQuery, state: FSMContext):
    """
    [RU]
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Displays contact information.

    Args:
        callback (CallbackQuery): Callback query object
        state (FSMContext): FSM state context
    """
    await state.clear()

    builder = InlineKeyboardBuilder()
    for name in ["üíª –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç", "üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        builder.button(text=name, callback_data=name)
    builder.adjust(2, 1)

    await callback.message.edit_text(
        text=f'–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n'
             f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +79991551043\n'
             f'üìß Email: site-it@mail.ru\n'
             f'üì± Telegram: @site_it',
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.casefold().contains('–ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç'))
async def main_reference(callback: CallbackQuery, state: FSMContext):
    """
    [RU]
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Displays work examples categories.

    Args:
        callback (CallbackQuery): Callback query object
        state (FSMContext): FSM state context
    """
    await state.clear()
    await state.set_state(Reference.view)

    ref_list = ["üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏",
                "üíÑ –ë—å—é—Ç–∏-—Å—Ñ–µ—Ä–∞",
                "üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                "üçï –ï–¥–∞ –∏ —Ç–æ–≤–∞—Ä—ã",
                "üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å",
                "üè† –†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                "üë®‚Äçüíª –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
                "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]

    builder = InlineKeyboardBuilder()
    for name in ref_list:
        builder.button(text=name, callback_data=name)
    builder.adjust(1)

    await callback.message.edit_text(
        text=f"<b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.casefold().contains('–∑–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç'))
async def main_order(callback: CallbackQuery, state: FSMContext):
    """
    [RU]
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —Å–∞–π—Ç–∞.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Starts the website ordering process.

    Args:
        callback (CallbackQuery): Callback query object
        state (FSMContext): FSM state context
    """
    await state.clear()
    await state.set_state(Interview.question)
    await state.update_data(message=callback.message,)

    from handlers.interview.questions import ask_question
    await ask_question(callback.message, state)


@router.callback_query(Reference.view, ~F.data.contains('–ù–∞–∑–∞–¥'))
async def view_reference(callback: CallbackQuery):
    """
    [RU]
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞

    [EN]
    Shows work examples for selected category.

    Args:
        callback (CallbackQuery): Callback query object
    """
    directory = None

    if callback.data == "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏":
        directory = 'auto'
    elif callback.data == "üíÑ –ë—å—é—Ç–∏-—Å—Ñ–µ—Ä–∞":
        directory = 'beauty'
    elif callback.data == "üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ":
        directory = 'building'
    elif callback.data == "üçï –ï–¥–∞ –∏ —Ç–æ–≤–∞—Ä—ã":
        directory = 'food'
    elif callback.data == "üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å":
        directory = 'industry'
    elif callback.data == "üè† –†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
        directory = 'repair'
    elif callback.data == "üë®‚Äçüíª –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã":
        directory = 'specialist'
    else:
        return

    photo_paths = [Path('.', 'data', 'image', directory, f'{num}.PNG') for num in range(1, 5)]
    media = [InputMediaPhoto(media=FSInputFile(path)) for path in photo_paths]
    await callback.message.answer_media_group(media=media)

    builder = InlineKeyboardBuilder()
    for name in ['–ù–∞–∑–∞–¥', 'üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
        builder.button(text=name, callback_data=name)
    builder.adjust(1)

    await callback.message.answer(text=f'–ü—Ä–∏–º–µ—Ä—ã –ø–æ —Ç–µ–º–µ {callback.data}', reply_markup=builder.as_markup())
    await callback.message.delete()


@router.callback_query(Reference.view, F.data.contains('–ù–∞–∑–∞–¥'))
async def view_reference(callback: CallbackQuery, state: FSMContext):
    """
    [RU]
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

    [EN]
    Handler for returning to work examples categories list.

    Args:
        callback (CallbackQuery): Callback query object
        state (FSMContext): FSM state context
    """
    await main_reference(callback, state)
